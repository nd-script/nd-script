[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ndscript"
version = "2.0.0"
description = "The World's First Production-Ready Bilingual Programming Language"
readme = "README_PRODUCTION.md"
license = {text = "MIT"}
authors = [
    {name = "ND-Script Development Team", email = "team@ndscript.org"}
]
maintainers = [
    {name = "ND-Script Development Team", email = "team@ndscript.org"}
]
keywords = [
    "bilingual", "programming", "language", "arabic", "english", "dsl",
    "interpreter", "quantum", "simulation", "fractal", "universe",
    "education", "multilingual", "cross-cultural", "computational-linguistics"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Interpreters",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Topic :: Education",
    "Natural Language :: Arabic",
    "Natural Language :: English",
]
requires-python = ">=3.8"
dependencies = [
    "lark>=1.1.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "typing-extensions>=4.0.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "twine>=4.0.0",
    "wheel>=0.37.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipython>=8.0.0",
    "notebook>=6.4.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
performance = [
    "cython>=0.29.0",
    "numba>=0.56.0",
    "numpy>=1.21.0",
]
web = [
    "flask>=2.0.0",
    "flask-cors>=3.0.0",
]
all = [
    "pytest>=7.0.0", "pytest-cov>=4.0.0", "black>=22.0.0", "flake8>=5.0.0",
    "mypy>=0.991", "pre-commit>=2.20.0", "jupyter>=1.0.0", "ipython>=8.0.0",
    "sphinx>=5.0.0", "sphinx-rtd-theme>=1.0.0", "cython>=0.29.0", "numba>=0.56.0",
    "flask>=2.0.0", "flask-cors>=3.0.0",
]

[project.scripts]
ndscript = "nds.cli:main"
nds = "nds.cli:main"

[project.urls]
Homepage = "https://ndscript.org"
Documentation = "https://docs.ndscript.org"
Repository = "https://github.com/ndscript/ndscript"
"Bug Tracker" = "https://github.com/ndscript/ndscript/issues"
Changelog = "https://github.com/ndscript/ndscript/blob/main/CHANGELOG.md"
Community = "https://community.ndscript.org"
Playground = "https://ndscript.org/playground"

[tool.setuptools.packages.find]
where = ["."]
include = ["nds*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["nds/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["nds"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
